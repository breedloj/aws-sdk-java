/*
 * Copyright 2016-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *    http://aws.amazon.com/apache2.0
 *
 * This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
 * OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and
 * limitations under the License.
 */
package com.amazonaws.services.dynamodbv2.datamodeling;

import static com.amazonaws.services.dynamodbv2.datamodeling.StandardBeanProperties.of;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import com.amazonaws.services.dynamodbv2.datamodeling.StandardBeanProperties.Bean;
import com.amazonaws.services.dynamodbv2.model.KeyType;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import java.util.UUID;

import org.junit.Test;

/**
 * Unit tests for {@code StandardModelFactories}.
 */
public class StandardBeanPropertiesTest {

    /**
     * Test mappings.
     */
    @Test
    public void testHashAndRangeKey() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBHashKey(attributeName="hk")
            public String getKey() { return super.getKey(); }
            @DynamoDBRangeKey(attributeName="rk")
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> hk = beans.get("hk");
        final Bean<Object,Object> rk = beans.get("rk");
        assertEquals(KeyType.HASH, hk.annotations().keyType());
        assertEquals(KeyType.RANGE, rk.annotations().keyType());
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIgnore() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBAttribute(attributeName="value")
            public String getVal() { return super.getVal(); }
            @DynamoDBIgnore @DynamoDBAttribute(attributeName="ignore")
            public String getIgnore() { return null; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        assertEquals(2, beans.size());
        assertNotNull(beans.get("key"));
        assertNotNull(beans.get("value"));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedHashKeyString() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBAttribute
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> key = beans.get("key");
        assertEquals(KeyType.HASH, key.annotations().keyType());
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, key.getGenerateStrategy());
        assertNotNull(key.generate(null));
        assertNotNull(key.generate(UUID.randomUUID().toString()));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedRangeKeyUuid() {
        final Object obj = new AutoKeyAndVal<UUID>() {
            @DynamoDBRangeKey @DynamoDBAutoGeneratedKey
            public UUID getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(KeyType.RANGE, val.annotations().keyType());
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertNotNull(val.generate(null));
        assertNotNull(val.generate(UUID.randomUUID()));
    }

    /**
     * Test mappings.
     */
    @Test(expected=DynamoDBMappingException.class)
    public void testAutoGeneratedConflict() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBHashKey @DynamoDBAutoGeneratedKey @DynamoDBVersionAttribute
            public String getKey() { return super.getKey(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
    }

    /**
     * Test mappings.
     */
    @Test(expected=DynamoDBMappingException.class)
    public void testAutoGeneratedVersionObject() {
        final Object obj = new AutoKeyAndVal<Object>() {
            @DynamoDBVersionAttribute
            public Object getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        val.generate(null); //<- should fail
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionBigInteger() {
        final Object obj = new AutoKeyAndVal<BigInteger>() {
            @DynamoDBVersionAttribute
            public BigInteger getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(true, val.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertEquals(BigInteger.ONE, val.generate(null));
        assertEquals(BigInteger.valueOf((int)2), val.generate(BigInteger.ONE));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionByte() {
        final Object obj = new AutoKeyAndVal<Byte>() {
            @DynamoDBVersionAttribute
            public Byte getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(true, val.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertEquals(Byte.valueOf((byte)1), val.generate(null));
        assertEquals(Byte.valueOf((byte)2), val.generate(Byte.valueOf((byte)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionBytePrimitive() {
        final Object obj = new AutoKeyAndVal<String>() {
            private byte rvn;
            @DynamoDBAttribute
            public String getVal() { return super.getVal(); }
            @DynamoDBVersionAttribute
            public byte getRvn() { return this.rvn; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> rvn = beans.get("rvn");
        assertEquals(true, rvn.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, rvn.getGenerateStrategy());
        assertEquals(Byte.valueOf((byte)1), rvn.generate(null));
        assertEquals(Byte.valueOf((byte)2), rvn.generate(Byte.valueOf((byte)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionInteger() {
        final Object obj = new AutoKeyAndVal<Integer>() {
            @DynamoDBVersionAttribute
            public Integer getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(true, val.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertEquals(Integer.valueOf((int)1), val.generate(null));
        assertEquals(Integer.valueOf((int)2), val.generate(Integer.valueOf((int)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionIntegerPrimitive() {
        final Object obj = new AutoKeyAndVal<String>() {
            private int rvn;
            @DynamoDBAttribute
            public String getVal() { return super.getVal(); }
            @DynamoDBVersionAttribute
            public int getRvn() { return this.rvn; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> rvn = beans.get("rvn");
        assertEquals(true, rvn.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, rvn.getGenerateStrategy());
        assertEquals(Integer.valueOf((int)1), rvn.generate(null));
        assertEquals(Integer.valueOf((int)2), rvn.generate(Integer.valueOf((int)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionLong() {
        final Object obj = new AutoKeyAndVal<Long>() {
            @DynamoDBVersionAttribute
            public Long getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(true, val.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertEquals(Long.valueOf((long)1), val.generate(null));
        assertEquals(Long.valueOf((long)2), val.generate(Long.valueOf((long)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionLongPrimitive() {
        final Object obj = new AutoKeyAndVal<String>() {
            private long rvn;
            @DynamoDBAttribute
            public String getVal() { return super.getVal(); }
            @DynamoDBVersionAttribute
            public long getRvn() { return this.rvn; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> rvn = beans.get("rvn");
        assertEquals(true, rvn.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, rvn.getGenerateStrategy());
        assertEquals(Long.valueOf((long)1), rvn.generate(null));
        assertEquals(Long.valueOf((long)2), rvn.generate(Long.valueOf((long)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionShort() {
        final Object obj = new AutoKeyAndVal<Short>() {
            @DynamoDBVersionAttribute
            public Short getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(true, val.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertEquals(Short.valueOf((short)1), val.generate(null));
        assertEquals(Short.valueOf((short)2), val.generate(Short.valueOf((short)1)));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedVersionShortPrimitive() {
        final Object obj = new AutoKeyAndVal<String>() {
            private short rvn;
            @DynamoDBAttribute
            public String getVal() { return super.getVal(); }
            @DynamoDBVersionAttribute
            public short getRvn() { return this.rvn; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> rvn = beans.get("rvn");
        assertEquals(true, rvn.annotations().versioned());
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, rvn.getGenerateStrategy());
        assertEquals(Short.valueOf((short)1), rvn.generate(null));
        assertEquals(Short.valueOf((short)2), rvn.generate(Short.valueOf((short)1)));
    }

    /**
     * Test mappings.
     */
    @Test(expected=DynamoDBMappingException.class)
    public void testAutoGeneratedTimestampObject() {
        final Object obj = new AutoKeyAndVal<Object>() {
            @DynamoDBAutoGeneratedTimestamp
            public Object getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedTimestampCalendar() {
        final Object obj = new AutoKeyAndVal<Calendar>() {
            @DynamoDBAutoGeneratedTimestamp
            public Calendar getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertNotNull(val.generate(null));
        assertNotNull(val.generate(Calendar.getInstance()));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedTimestampDateKey() {
        final Object obj = new AutoKeyAndVal<Date>() {
            @DynamoDBRangeKey @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.CREATE)
            public Date getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(KeyType.RANGE, val.annotations().keyType());
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertNotNull(val.generate(null));
        assertNotNull(val.generate(new Date()));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedTimestampDateVal() {
        final Object obj = new AutoKeyAndVal<Date>() {
            @DynamoDBAutoGeneratedTimestamp
            public Date getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertNotNull(val.generate(null));
        assertNotNull(val.generate(new Date()));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedTimestampLong() {
        final Object obj = new AutoKeyAndVal<Long>() {
            @DynamoDBAutoGeneratedTimestamp
            public Long getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.ALWAYS, val.getGenerateStrategy());
        assertNotNull(val.generate(null));
        assertNotNull(val.generate(System.currentTimeMillis()));
    }

    /**
     * Test mappings.
     */
    @Test(expected=DynamoDBMappingException.class)
    public void testAutoGeneratedDefaultObject() {
        final Object obj = new AutoKeyAndVal<Object>() {
            @DynamoDBAutoGeneratedDefault("default-val")
            public Object getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultString() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBAutoGeneratedDefault("default-val")
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals("default-val", val.generate(null));
        assertEquals("default-val", val.generate("not-default"));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultBigDecimal() {
        final Object obj = new AutoKeyAndVal<BigDecimal>() {
            @DynamoDBAutoGeneratedDefault("1234.5")
            public BigDecimal getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(BigDecimal.valueOf(1234.5D), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultBigInteger() {
        final Object obj = new AutoKeyAndVal<BigInteger>() {
            @DynamoDBAutoGeneratedDefault("1234")
            public BigInteger getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(BigInteger.valueOf(1234), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultBoolean() {
        final Object obj = new AutoKeyAndVal<Boolean>() {
            @DynamoDBAutoGeneratedDefault("true")
            public Boolean getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Boolean.TRUE, val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultBooleanZero() {
        final Object obj = new AutoKeyAndVal<Boolean>() {
            @DynamoDBAutoGeneratedDefault("0")
            public Boolean getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Boolean.FALSE, val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultBooleanOne() {
        final Object obj = new AutoKeyAndVal<Boolean>() {
            @DynamoDBAutoGeneratedDefault("1")
            public Boolean getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Boolean.TRUE, val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultByte() {
        final Object obj = new AutoKeyAndVal<Byte>() {
            @DynamoDBAutoGeneratedDefault("1")
            public Byte getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Byte.valueOf((byte)1), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultCharacter() {
        final Object obj = new AutoKeyAndVal<Character>() {
            @DynamoDBAutoGeneratedDefault("A")
            public Character getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Character.valueOf('A'), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultDouble() {
        final Object obj = new AutoKeyAndVal<Double>() {
            @DynamoDBAutoGeneratedDefault("1234.5")
            public Double getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Double.valueOf(1234.5D), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultFloat() {
        final Object obj = new AutoKeyAndVal<Float>() {
            @DynamoDBAutoGeneratedDefault("1234.5")
            public Float getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Float.valueOf(1234.5F), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultInteger() {
        final Object obj = new AutoKeyAndVal<Integer>() {
            @DynamoDBAutoGeneratedDefault("1234")
            public Integer getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Integer.valueOf((int)1234), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultLong() {
        final Object obj = new AutoKeyAndVal<Long>() {
            @DynamoDBAutoGeneratedDefault("1234")
            public Long getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Long.valueOf((long)1234), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultShort() {
        final Object obj = new AutoKeyAndVal<Short>() {
            @DynamoDBAutoGeneratedDefault("1234")
            public Short getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(Short.valueOf((short)1234), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testAutoGeneratedDefaultUuid() {
        final Object obj = new AutoKeyAndVal<UUID>() {
            @DynamoDBAutoGeneratedDefault("12345678-1234-1234-1234-123456789012")
            public UUID getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> val = beans.get("val");
        assertEquals(DynamoDBAutoGenerateStrategy.CREATE, val.getGenerateStrategy());
        assertEquals(UUID.fromString("12345678-1234-1234-1234-123456789012"), val.generate(null));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIndexHashKeyGlobalSecondaryIndexName() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBIndexHashKey(attributeName="gsi_hk", globalSecondaryIndexName="gsi")
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> gsi_hk = beans.get("gsi_hk");
        assertEquals(true, gsi_hk.annotations().indexed());
        assertEquals(1, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(0, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(0, gsi_hk.annotations().localSecondaryIndexNames().size());
        assertEquals("gsi", gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).get(0));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIndexHashKeyGlobalSecondaryIndexNames() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBIndexHashKey(attributeName="gsi_hk", globalSecondaryIndexNames={"gsi"})
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> gsi_hk = beans.get("gsi_hk");
        assertEquals(true, gsi_hk.annotations().indexed());
        assertEquals(1, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(0, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(0, gsi_hk.annotations().localSecondaryIndexNames().size());
        assertEquals("gsi", gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).get(0));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIndexRangeKeyGlobalSecondaryIndexName() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBIndexHashKey(attributeName="gsi_hk", globalSecondaryIndexName="gsi")
            public String getVal() { return super.getVal(); }
            @DynamoDBIndexRangeKey(attributeName="gsi_rk", globalSecondaryIndexName="gsi")
            public String getGsi() { return null; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> gsi_hk = beans.get("gsi_hk");
        assertEquals(true, gsi_hk.annotations().indexed());
        assertEquals(1, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(0, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(0, gsi_hk.annotations().localSecondaryIndexNames().size());
        assertEquals("gsi", gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).get(0));
        final Bean<Object,Object> gsi_rk = beans.get("gsi_rk");
        assertEquals(true, gsi_rk.annotations().indexed());
        assertEquals(0, gsi_rk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(1, gsi_rk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(0, gsi_rk.annotations().localSecondaryIndexNames().size());
        assertEquals("gsi", gsi_rk.annotations().globalSecondaryIndexNames(KeyType.RANGE).get(0));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIndexRangeKeyGlobalSecondaryIndexNames() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBIndexHashKey(attributeName="gsi_hk", globalSecondaryIndexName="gsi")
            public String getVal() { return super.getVal(); }
            @DynamoDBIndexRangeKey(attributeName="gsi_rk", globalSecondaryIndexNames={"gsi"})
            public String getGsi() { return null; }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> gsi_hk = beans.get("gsi_hk");
        assertEquals(true, gsi_hk.annotations().indexed());
        assertEquals(1, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(0, gsi_hk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(0, gsi_hk.annotations().localSecondaryIndexNames().size());
        assertEquals("gsi", gsi_hk.annotations().globalSecondaryIndexNames(KeyType.HASH).get(0));
        final Bean<Object,Object> gsi_rk = beans.get("gsi_rk");
        assertEquals(true, gsi_rk.annotations().indexed());
        assertEquals(0, gsi_rk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(1, gsi_rk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(0, gsi_rk.annotations().localSecondaryIndexNames().size());
        assertEquals("gsi", gsi_rk.annotations().globalSecondaryIndexNames(KeyType.RANGE).get(0));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIndexRangeKeyiLocalSecondaryIndexName() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBIndexRangeKey(attributeName="lsi_rk", localSecondaryIndexName="lsi")
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> lsi_rk = beans.get("lsi_rk");
        assertEquals(true, lsi_rk.annotations().indexed());
        assertEquals(0, lsi_rk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(0, lsi_rk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(1, lsi_rk.annotations().localSecondaryIndexNames().size());
        assertEquals("lsi", lsi_rk.annotations().localSecondaryIndexNames().get(0));
    }

    /**
     * Test mappings.
     */
    @Test
    public void testIndexRangeKeyLocalSecondaryIndexNames() {
        final Object obj = new AutoKeyAndVal<String>() {
            @DynamoDBIndexRangeKey(attributeName="lsi_rk", localSecondaryIndexNames={"lsi"})
            public String getVal() { return super.getVal(); }
        };
        final Map<String,Bean<Object,Object>> beans = of((Class<Object>)obj.getClass());
        final Bean<Object,Object> lsi_rk = beans.get("lsi_rk");
        assertEquals(true, lsi_rk.annotations().indexed());
        assertEquals(0, lsi_rk.annotations().globalSecondaryIndexNames(KeyType.HASH).size());
        assertEquals(0, lsi_rk.annotations().globalSecondaryIndexNames(KeyType.RANGE).size());
        assertEquals(1, lsi_rk.annotations().localSecondaryIndexNames().size());
        assertEquals("lsi", lsi_rk.annotations().localSecondaryIndexNames().get(0));
    }

    /**
     * Test mappings to make sure the bridge method is ruled out.
     */
    @Test
    public void testFindRelevantGettersWithBridgeMethod() {
        final Map<String,Bean<SubClass,Object>> beans = of(SubClass.class);
        assertEquals("only one getter should be returned", 1, beans.size());
        assertEquals("return type should be Integer rather than Object", Integer.class, beans.get("t").reflect().valueType());
    }
    @DynamoDBTable(tableName = "")
    private static abstract class SuperGenericClass<T> {
        public abstract T getT();
        public abstract void setT(T t);
    }
    @DynamoDBTable(tableName = "GenericString")
    private static class SubClass extends SuperGenericClass<Integer> {
        private Integer t;
        @Override
        public Integer getT() { return t; }
        @Override
        public void setT(Integer t) { this.t = t; }
    }

    /**
     * Test mappings.
     */
    @Test
    public void testNonMappedInheritedProperties() {
        final Map<String,Bean<NonMappedInheritedProperties,Object>> beans = of(NonMappedInheritedProperties.class);
        assertEquals(1, beans.size());
        assertNotNull(beans.get("doUse"));
    }
    public abstract class AbstractNonMappedInheritedProperties {
        private String doNotUse;
        public String getDoNotUse() { return this.doNotUse;  }
        public void setDoNotUse(final String doNotUse) { this.doNotUse = doNotUse; }
    }
    @DynamoDBTable(tableName="aws-java-sdk-test")
    public class NonMappedInheritedProperties extends AbstractNonMappedInheritedProperties {
        private String doUse;
        public String getDoUse() { return this.doUse; }
        public void setDoUse(final String doUse) { this.doUse = doUse; }
    }

    /**
     * Test mappings.
     */
    @Test
    public void testInheritedProperties() {
        final Map<String,Bean<BaseTablePojo,Object>> beans1 = of(BaseTablePojo.class);
        assertEquals(3, beans1.size());
        assertNotNull(beans1.get("hashKeyOnField"));
        assertNotNull(beans1.get("rangeKeyOnGetter"));
        final Map<String,Bean<TablePojoSubclass,Object>> beans2 = of(TablePojoSubclass.class);
        assertEquals(4, beans2.size());
        assertNotNull(beans2.get("hashKeyOnField"));
        assertNotNull(beans2.get("rangeKeyOnGetter"));
    }
    @DynamoDBTable(tableName="table")
    private static class BaseTablePojo {
        @DynamoDBHashKey
        private String hashKeyOnField;
        private String rangeKeyOnGetter;
        private String attrNoAnnotation;
        @DynamoDBIgnore
        private String ignoredAttr;
        public String getHashKeyOnField() { return hashKeyOnField; }
        public void setHashKeyOnField(String hashKeyOnField) { this.hashKeyOnField = hashKeyOnField; }
        @DynamoDBRangeKey
        public String getRangeKeyOnGetter() { return rangeKeyOnGetter; }
        public void setRangeKeyOnGetter(String rangeKeyOnGetter) { this.rangeKeyOnGetter = rangeKeyOnGetter; }
        public String getAttrNoAnnotation() { return attrNoAnnotation; }
        public void setAttrNoAnnotation(String attrNoAnnotation) { this.attrNoAnnotation = attrNoAnnotation; }
        public String getIgnoredAttr() { return ignoredAttr; }
        public void setIgnoredAttr(String ignoredAttr) { this.ignoredAttr = ignoredAttr; }
    }
    @DynamoDBTable(tableName="table")
    private static class TablePojoSubclass extends BaseTablePojo {
        private String ignoredAttr;
        @Override
        public String getIgnoredAttr() { return ignoredAttr; }
        @Override
        public void setIgnoredAttr(String ignoredAttr) { this.ignoredAttr = ignoredAttr; }
    }

    /**
     * Test mappings.
     */
    @Test
    public void testPojoWithGetterAnnotations() {
        PojoAsserts.assertAll(PojoWithGetterAnnotations.class);
    }

    /**
     * Test mappings.
     */
    @Test
    public void testPojoWithFieldAnnotations() {
        PojoAsserts.assertAll(PojoWithFieldAnnotations.class);
    }

    /**
     * Test mappings.
     */
    @Test
    public void testPojoWithMixedAnnotations() {
        PojoAsserts.assertAll(PojoWithMixedAnnotations.class);
    }

    /**
     * Pojo field assersions.
     */
    private static enum PojoAsserts {
        hashKey(KeyType.HASH, null),
        rangeKey(KeyType.RANGE, DynamoDBAutoGenerateStrategy.CREATE),
        indexHashKey(null, null),
        indexRangeKey(null, null),
        actualAttrName(null, null),
        versionedAttr(null, DynamoDBAutoGenerateStrategy.ALWAYS),
        marshallingAttr(null, null);
        private final DynamoDBAutoGenerateStrategy generateStrategy;
        private final KeyType keyType;
        private PojoAsserts(final KeyType keyType, final DynamoDBAutoGenerateStrategy generateStrategy) {
            this.generateStrategy = generateStrategy;
            this.keyType = keyType;
        }
        public static <T> void assertAll(final Class<T> clazz) {
            final Map<String,Bean<T,Object>> beans = of(clazz);
            for (final PojoAsserts asserts : PojoAsserts.values()) {
                final Bean<T,Object> bean = beans.get(asserts.name());
                assertNotNull(bean);
                assertEquals(asserts.keyType, bean.annotations().keyType());
                assertEquals(asserts.generateStrategy, bean.getGenerateStrategy());
                assertEquals(0, bean.annotations().localSecondaryIndexNames().size());
            }
            assertEquals(PojoAsserts.values().length, beans.size());
        }
    }

    /**
     * A POJO model that uses getter annotations.
     */
    @DynamoDBTable(tableName="table")
    private static class PojoWithGetterAnnotations {
        private String hashKey;
        private String rangeKey;
        private String indexHashKey;
        private String indexRangeKey;
        private String annotatedAttr;
        private String versionedAttr;
        private String marshallingAttr;
        private String ignoredAttr;
        @DynamoDBHashKey
        public String getHashKey() { return hashKey; }
        public void setHashKey(String hashKey) { this.hashKey = hashKey; }
        @DynamoDBRangeKey @DynamoDBAutoGeneratedKey
        public String getRangeKey() { return rangeKey; }
        public void setRangeKey(String rangeKey) { this.rangeKey = rangeKey; }
        @DynamoDBIndexHashKey(globalSecondaryIndexName="index")
        public String getIndexHashKey() { return indexHashKey; }
        public void setIndexHashKey(String indexHashKey) { this.indexHashKey = indexHashKey; }
        @DynamoDBIndexRangeKey(globalSecondaryIndexName="index")
        public String getIndexRangeKey() { return indexRangeKey; }
        public void setIndexRangeKey(String indexRangeKey) { this.indexRangeKey = indexRangeKey; }
        @DynamoDBAttribute(attributeName="actualAttrName")
        public String getAnnotatedAttr() { return annotatedAttr; }
        public void setAnnotatedAttr(String annotatedAttr) { this.annotatedAttr = annotatedAttr; }
        @DynamoDBVersionAttribute
        public String getVersionedAttr() { return versionedAttr; }
        public void setVersionedAttr(String versionedAttr) { this.versionedAttr = versionedAttr; }
        @DynamoDBMarshalling(marshallerClass=RandomUUIDMarshaller.class)
        public String getMarshallingAttr() { return marshallingAttr; }
        public void setMarshallingAttr(String marshallingAttr) { this.marshallingAttr = marshallingAttr; }
        @DynamoDBIgnore
        public String getIgnoredAttr() { return ignoredAttr; }
        public void setIgnoredAttr(String ignoredAttr) { this.ignoredAttr = ignoredAttr; }
    }

    /**
     * The same model as defined in PojoWithGetterAnnotations, but uses field
     * annotations instead.
     */
    @DynamoDBTable(tableName="table")
    private static class PojoWithFieldAnnotations {
        @DynamoDBHashKey
        private String hashKey;
        @DynamoDBRangeKey @DynamoDBAutoGeneratedKey
        private String rangeKey;
        @DynamoDBIndexHashKey(globalSecondaryIndexName="index")
        private String indexHashKey;
        @DynamoDBIndexRangeKey(globalSecondaryIndexName="index")
        private String indexRangeKey;
        @DynamoDBAttribute(attributeName="actualAttrName")
        private String annotatedAttr;
        @DynamoDBVersionAttribute
        private String versionedAttr;
        @DynamoDBMarshalling(marshallerClass=RandomUUIDMarshaller.class)
        private String marshallingAttr;
        @DynamoDBIgnore
        private String ignoredAttr;
        public String getHashKey() { return hashKey; }
        public void setHashKey(String hashKey) { this.hashKey = hashKey; }
        public String getRangeKey() { return rangeKey; }
        public void setRangeKey(String rangeKey) { this.rangeKey = rangeKey; }
        public String getIndexHashKey() { return indexHashKey; }
        public void setIndexHashKey(String indexHashKey) { this.indexHashKey = indexHashKey; }
        public String getIndexRangeKey() { return indexRangeKey; }
        public void setIndexRangeKey(String indexRangeKey) { this.indexRangeKey = indexRangeKey; }
        public String getAnnotatedAttr() { return annotatedAttr; }
        public void setAnnotatedAttr(String annotatedAttr) { this.annotatedAttr = annotatedAttr; }
        public String getVersionedAttr() { return versionedAttr; }
        public void setVersionedAttr(String versionedAttr) { this.versionedAttr = versionedAttr; }
        public String getMarshallingAttr() { return marshallingAttr; }
        public void setMarshallingAttr(String marshallingAttr) { this.marshallingAttr = marshallingAttr; }
        public String getIgnoredAttr() { return ignoredAttr; }
        public void setIgnoredAttr(String ignoredAttr) { this.ignoredAttr = ignoredAttr; }
    }

    /**
     * The same model as defined in PojoWithGetterAnnotations, but uses both getter and field
     * annotations.
     */
    @DynamoDBTable(tableName="table")
    private static class PojoWithMixedAnnotations {
        @DynamoDBHashKey
        private String hashKey;
        private String rangeKey;
        @DynamoDBIndexHashKey(globalSecondaryIndexName="index")
        private String indexHashKey;
        private String indexRangeKey;
        @DynamoDBAttribute(attributeName="actualAttrName")
        private String annotatedAttr;
        private String versionedAttr;
        @DynamoDBMarshalling(marshallerClass=RandomUUIDMarshaller.class)
        private String marshallingAttr;
        private String ignoredAttr;
        public String getHashKey() { return hashKey; }
        public void setHashKey(String hashKey) { this.hashKey = hashKey; }
        @DynamoDBRangeKey @DynamoDBAutoGeneratedKey
        public String getRangeKey() { return rangeKey; }
        public void setRangeKey(String rangeKey) { this.rangeKey = rangeKey; }
        public String getIndexHashKey() { return indexHashKey; }
        public void setIndexHashKey(String indexHashKey) { this.indexHashKey = indexHashKey; }
        @DynamoDBIndexRangeKey(globalSecondaryIndexName="index")
        public String getIndexRangeKey() { return indexRangeKey; }
        public void setIndexRangeKey(String indexRangeKey) { this.indexRangeKey = indexRangeKey; }
        public String getAnnotatedAttr() { return annotatedAttr; }
        public void setAnnotatedAttr(String annotatedAttr) { this.annotatedAttr = annotatedAttr; }
        @DynamoDBVersionAttribute
        public String getVersionedAttr() { return versionedAttr; }
        public void setVersionedAttr(String versionedAttr) { this.versionedAttr = versionedAttr; }
        public String getMarshallingAttr() { return marshallingAttr; }
        public void setMarshallingAttr(String marshallingAttr) { this.marshallingAttr = marshallingAttr; }
        @DynamoDBIgnore
        public String getIgnoredAttr() { return ignoredAttr; }
        public void setIgnoredAttr(String ignoredAttr) { this.ignoredAttr = ignoredAttr; }
    }

}
